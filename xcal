#!/usr/bin/python
# -*- coding: utf-8 -*-
# requires python-configparser, python-numpy, python-tk, python-wxgtk3.0

from __future__ import division
from __future__ import print_function
import argparse
import configparser
import numpy as np
import os
import re
import subprocess
import sys

PY2 = sys.version_info < (3,0,0)
if PY2:
    input = raw_input

PROP_NAME = 'libinput Calibration Matrix'
#PROP_NAME = 'Coordinate Transformation Matrix' # For Testing with any Device

# XInput ---------------------------------------------------------------------
class XInput():

    # Public Functions -------------------------------------------------------

    def get_devs(self):
        devs = {int(groups[1]): groups[0] for groups in
                re.findall(r'â†³ (\w.+\w)\s+id=(\d+)\D+slave *pointer',
                           self._xinput('--list', '--short'))}
        if not devs:
            print('No suitable input devices found')
            exit(1)
        return devs

    def get_cal(self, dev):
        stdout = self._xinput('--list-props', str(dev))
        line = re.search(PROP_NAME + r'.*:\s+(\S.+)', stdout)
        if not line:
            print('Cal property not set; is this an xinput device?')
            exit(1)
        vals = np.matrix(line.group(1)).reshape(3, 3)

        print('Old calibration:')
        print(vals)
        print("")
        return vals, np.linalg.inv(vals)

    def set_cal(self, dev, new_cal):
        cal_array = [str(x)+',' for x in new_cal.flatten().tolist()[0]]
        self._xinput('--set-prop', str(dev), PROP_NAME, *cal_array)

    # Private Functions ------------------------------------------------------

    def _xinput(self, *args):
        cmd = ['/usr/bin/xinput']
        for arg in args:
            cmd.append(arg)
        retval = subprocess.check_output(cmd)
        if PY2:
            return retval
        else:
            return retval.decode("utf-8")


# Calibration ----------------------------------------------------------------
class Calibration():

    # Pubblic Functions ------------------------------------------------------

    def show(self, n_points, old_cal_inv, new_cal=None):
        self._n_points = n_points
        self._old_cal_inv = old_cal_inv
        self._new_cal = new_cal

        if PY2:
            from Tkinter import Tk, Canvas
        else:
            from tkinter import Tk, Canvas

        from math import ceil, sqrt

        self._root = Tk()
        self._X, self._Y = None, None
        self._root.attributes('-fullscreen', True)
        self._canvas = Canvas(self._root)

        self._canvas.bind('<Configure>', self._on_resize)
        self._canvas.pack(expand=True, fill='both')

        self._legend_y = None

        self._point, self._points = {}, []
        self._index = -1
        self._n_cols = int(ceil(sqrt(self._n_points)))
        self._n_rows = int(ceil(self._n_points / self._n_cols))
        self._sensitive = False

        self._root.bind('<Escape>', self._on_cancel_cal)
        self._canvas.bind('<Escape>', self._on_cancel_cal)

        self._canvas.bind('<Button-1>', self._on_click)

        self._root.mainloop()

        return self._points

    def calibrate(self, points, disable_rot):
        if disable_rot:
            '''
            [mx 1] [a 0]   [sx 1]
            [mx 1] [e 1] = [sx 1]
            [... ]         [... ]

            [my 1] [d 0]   [sy 1]
            [my 1] [f 1] = [sy 1]
            [... ]         [... ]
            '''
            tx, qual_x = self._fit(screen_pts=((p['sx'],) for p in points),
                                   mouse_pts=((p['mx'],) for p in points))
            ty, qual_y = self._fit(screen_pts=((p['sy'],) for p in points),
                                   mouse_pts=((p['my'],) for p in points))
            m_transform = np.matrix([
                [tx[0, 0], 0,        0],
                [0,        ty[0, 0], 0],
                [tx[1, 0], ty[1, 0], 1]])
            quality = min(qual_x, qual_y)
        else:
            '''
            m_mouse * m_transform = m_screen
            [mx my 1] [a b 0]   [sx sy 1]
            [mx my 1] [c d 0] = [sx sy 1]
            [...    ] [e f 1]   [...    ]
            '''
            m_transform, quality = self._fit(screen_pts=[(p['sx'], p['sy']) for p in points],
                                             mouse_pts=[(p['mx'], p['my']) for p in points])
            m_transform[:, 2] = ([0], [0], [1])

        m_transform = m_transform.getT()
        return m_transform, quality

    # Private Functions ------------------------------------------------------

    def _transform(self, x, y, cal):
        p = np.matrix([[x], [y], [1]])
        out = np.matmul(cal, p)
        return out.item(0), out.item(1)

    def _fit(self, screen_pts, mouse_pts):
        from math import log10

        pointlist = []
        for sp in screen_pts:
            l  = []
            for p in sp:
                l.append(p)
            l.append(1)
            pointlist.append(l)
        m_screen = np.matrix(pointlist)

        pointlist = []
        for mp in mouse_pts:
            l  = []
            for p in mp:
                l.append(p)
            l.append(1)
            pointlist.append(l)
        m_mouse = np.matrix(pointlist)

        m_transform, residuals, rank, singular = np.linalg.lstsq(m_mouse, m_screen)
        quality = -log10(residuals.sum())

        return m_transform, quality

    def _legend(self, text, colour='#000'):
        self._canvas.create_text(self._X/2, self._legend_y, text=text, fill=colour)
        self._legend_y += 12

    def _draw_legends(self):
        self._legend_y = self._Y * 0.3
        self._legend('Esc to cancel.')
        self._legend('Raw point in black')
        self._legend('Old cal point in blue', '#00F')
        self._legend('Target point in red', '#F00')
        if self._new_cal is not None:
            self._legend('New cal point in green', '#0F0')

    def _next_point(self):
        self._index += 1
        if self._index >= self._n_points:
            self._sensitive = False
            self._root.after(1000, self._root.destroy)
        else:
            self._sensitive = True
            x = 0.1 + 0.8*(self._index % self._n_cols)/(self._n_cols - 1)
            y = 0.1 + 0.8*(self._index // self._n_cols)/(self._n_rows - 1)
            self._point = {'sx': x, 'sy': y}

            self._draw_target(self._point['sx'], self._point['sy'])

    def _cross(self, px, py, colour):
        x, y = px * self._X, py * self._Y
        self._canvas.create_line(x-10, y, x+10, y, fill=colour)
        self._canvas.create_line(x, y-10, x, y+10, fill=colour)

    def _draw_target(self, px, py):
        x, y = px * self._X, py * self._Y
        self._canvas.create_oval(x-10, y-10, x+10, y+10, outline='#F00', width=3)
        self._cross(px, py, '#F00')

    def _indicator(self, sx, sy, px, py, colour):
        self._canvas.create_line(self._X*sx, self._Y*sy, self._X*px, self._Y*py, fill=colour)
        self._cross(px, py, colour)

    # Events -----------------------------------------------------------------

    def _on_cancel_cal(self, event):
        print('Calibration cancelled')
        self._points.clear()
        self._root.destroy()

    def _on_click(self, event):
        if not self._sensitive:
            return
        self._sensitive = False

        sx, sy = self._point['sx'], self._point['sy']

        ox, oy = event.x/self._X, event.y/self._Y  # old-calibrated
        self._indicator(sx, sy, ox, oy, '#00F')

        ux, uy = self._transform(ox, oy, self._old_cal_inv)  # uncalibrated
        self._indicator(sx, sy, ux, uy, '#000')

        if self._new_cal is not None:
            nx, ny = self._transform(ux, uy, self._new_cal)  # new-calibrated (test only)
            self._indicator(sx, sy, nx, ny, '#0F0')

        self._point.update({'mx': ux, 'my': uy})
        self._points.append(self._point)

        self._canvas.after(500, self._next_point)

    def _on_resize(self, event):
        self._X, self._Y = event.width, event.height
        self._draw_legends()
        self._next_point()


# Command Line Interface -----------------------------------------------------
class CLI():

    # Public Functions -------------------------------------------------------

    def run(self):
        xinput = XInput()
        calibration = Calibration()

        devs = xinput.get_devs()
        self._print_devs(devs)
        preferred = self._choose_preferred(devs)
        dev = self._choose_dev(devs, preferred)
        print("")

        old_cal, old_cal_inv = xinput.get_cal(dev)

        new_cal = None
        if self._ask('Calibrate?'):
            n_points = self._choose_points()
            disable_rot = self._ask('Disable rotation?')
            print("")

            points = calibration.show(n_points, old_cal_inv)
            if points:
                new_cal, quality = calibration.calibrate(points, disable_rot)

                print('New calibration:')
                print(new_cal)
                print('Quality (should be at least 3): %.1f' % quality)
                print("")

        if self._ask('Test?'):
            n_points = self._choose_points()
            calibration.show(n_points, old_cal_inv, new_cal)

        if new_cal is not None and self._ask('Use calibration?'):
            xinput.set_cal(dev, new_cal)

    # Private Functions ------------------------------------------------------

    def _ask(self, q):
        do = input(q + ' [y]: ')
        return (do or 'y').lower() == 'y'

    def _print_devs(self, devs):
        print('Pointer devices:')
        print('%4s %35s' % ('ID', 'Name'))
        for i, name in sorted(devs.items()):
            print('%4d %35s' % (i, name))
        print("")

    def _choose_preferred(self, devs):
        preferred = [i for (i, n) in devs.items() if 'touch' in n.lower()]
        if preferred:
            return preferred[0]
        return next(iter(devs.keys()))

    def _choose_dev(self, devs, preferred):
        while True:
            devstr = input('Device to calibrate [%d]: ' % preferred)
            if not devstr:
                return preferred
            try:
                dev = int(devstr)
            except ValueError:
                continue
            if dev in devs.keys():
                return dev

    def _choose_points(self):
        p_min, default = 3, 4

        while True:
            p_str = input('Point count (min %d) [%d]: ' %
                          (p_min, default))
            if not p_str:
                return default
            try:
                p = int(p_str)
            except ValueError:
                continue

            if p >= p_min:
                return p


# Graphical User Interface ---------------------------------------------------
class GUI():

    def run(self):
        self._xinput = XInput()
        self._calibration = Calibration()

        self._device = ''
        self._disable_rotation = False
        self._new_cal = None
        self._old_cal = None
        self._old_cal_inv = None
        self._points = 0
        self._quality = 0

        app = wx.App()
        self._device_frame()
        app.MainLoop()

    def _device_frame(self):
        self._frame = wx.Frame(None,
                        size = wx.Size(320, 240),
                        style = wx.CLOSE_BOX | wx.STAY_ON_TOP,
                        title = "Calibration - Select Device")

        self._panel = wx.Panel(self._frame)

        self._lb = wx.ListBox(self._panel,
                   pos = wx.Point(10, 10),
                   size = wx.Size(290, 150))

        devs = self._xinput.get_devs()
        for i, name in sorted(devs.items()):
            self._lb.Append(name)

        btn = wx.Button(self._panel,
                        label = "Ok",
                        pos = wx.Point(10, 175),
                        size = wx.Size(290, 25))
        btn.Bind(wx.EVT_BUTTON, self._on_button_1_ok)

        self._frame.Show()

    def _options_frame(self):
        self._frame = wx.Frame(None,
                        size = wx.Size(320, 240),
                        style = wx.CLOSE_BOX | wx.STAY_ON_TOP,
                        title = "Calibration - Select Options")

        self._panel = wx.Panel(self._frame)

        self._rbRotation = wx.RadioBox(self._panel,
                    choices = ["Allow", "Disable"],
                    label = "Rotation",
                    pos = wx.Point(10, 10),
                    style = wx.VERTICAL,
                    size = wx.Size(140, 155))

        self._rbPoints = wx.RadioBox(self._panel,
                    choices = ["4 Points", "9 Points", "16 Points"],
                    label = "Calibration",
                    pos = wx.Point(160, 10),
                    style = wx.VERTICAL,
                    size = wx.Size(140, 155))

        btn = wx.Button(self._panel,
                        label = "Ok",
                        pos = wx.Point(10, 175),
                        size = wx.Size(290, 25))
        btn.Bind(wx.EVT_BUTTON, self._on_button_2_ok)

        self._frame.Show()

    def _execute_frame(self):
        self._frame = wx.Frame(None,
                        size = wx.Size(320, 240),
                        style = wx.CLOSE_BOX | wx.STAY_ON_TOP,
                        title = "Calibration - Execute")

        self._panel = wx.Panel(self._frame)

        tc = wx.TextCtrl(self._panel,
                        pos = wx.Point(10, 10),
                        size = wx.Size(290, 150),
                        style = wx.TE_MULTILINE)

        self._old_cal, self._old_cal_inv = self._xinput.get_cal(self._device)
        tc.AppendText("Old Calibration:\n")
        tc.AppendText(repr(self._old_cal))

        btn = wx.Button(self._panel,
                        label = "GO",
                        pos = wx.Point(10, 175),
                        size = wx.Size(290, 25))
        btn.Bind(wx.EVT_BUTTON, self._on_button_3_ok)

        self._frame.Show()

    def _calibration_frame(self):
        self._frame = wx.Frame(None,
                        size = wx.Size(320, 240),
                        style = wx.CLOSE_BOX | wx.STAY_ON_TOP,
                        title = "Calibration - Calibration")

        self._panel = wx.Panel(self._frame)

        tc = wx.TextCtrl(self._panel,
                        pos = wx.Point(10, 10),
                        size = wx.Size(290, 150),
                        style = wx.TE_MULTILINE)

        points = self._calibration.show(self._points, self._old_cal_inv)
        self._new_cal, self._quality = self._calibration.calibrate(points, self._disable_rotation)

        tc.AppendText('New calibration:\n')
        tc.AppendText(repr(self._new_cal))
        tc.AppendText('\nQuality (should be at least 3): %.1f' % self._quality)

        btn = wx.Button(self._panel,
                        label = "Ok",
                        pos = wx.Point(10, 175),
                        size = wx.Size(290, 25))
        btn.Bind(wx.EVT_BUTTON, self._on_button_4_ok)

        self._frame.Show()

    def _activate_frame(self):
        self._frame = wx.Frame(None,
                        size = wx.Size(320, 240),
                        style = wx.CLOSE_BOX | wx.STAY_ON_TOP,
                        title = "Calibration - Activate")

        self._panel = wx.Panel(self._frame)

        wx.StaticText(self._panel,
                      label = "Activate Calibration?",
                      pos = wx.Point(10, 10),
                      size = wx.Size(140, 25))

        btn = wx.Button(self._panel,
                        label = "Yes",
                        pos = wx.Point(10, 175),
                        size = wx.Size(140, 25))
        btn.Bind(wx.EVT_BUTTON, self._on_button_5_yes)

        btn = wx.Button(self._panel,
                        label = "No",
                        pos = wx.Point(160, 175),
                        size = wx.Size(140, 25))
        btn.Bind(wx.EVT_BUTTON, self._on_button_5_no)

        self._frame.Show()

    def _save_frame(self):
        self._frame = wx.Frame(None,
                        size = wx.Size(320, 240),
                        style = wx.CLOSE_BOX | wx.STAY_ON_TOP,
                        title = "Calibration - Save")

        self._panel = wx.Panel(self._frame)

        wx.StaticText(self._panel,
                      label = "Save Calibration?",
                      pos = wx.Point(10, 10),
                      size = wx.Size(140, 25))

        btn = wx.Button(self._panel,
                        label = "Yes",
                        pos = wx.Point(10, 175),
                        size = wx.Size(140, 25))
        btn.Bind(wx.EVT_BUTTON, self._on_button_6_yes)

        btn = wx.Button(self._panel,
                        label = "No",
                        pos = wx.Point(160, 175),
                        size = wx.Size(140, 25))
        btn.Bind(wx.EVT_BUTTON, self._on_button_6_no)

        self._frame.Show()

    # Events -----------------------------------------------------------------

    def _on_button_1_ok(self, event):

        index = self._lb.GetSelection()
        if index >= 0:
            device = self._lb.Items[self._lb.GetSelection()]
            self._device = device
            self._frame.Close()
            self._options_frame()

    def _on_button_2_ok(self, event):
        if self._rbRotation.GetSelection() == 1:
            self._disable_rotation = True
        if self._rbPoints.GetSelection() == 0:
            self._points = 4
        elif self._rbPoints.GetSelection() == 1:
            self._points = 9
        elif self._rbPoints.GetSelection() == 2:
            self._points = 16
        self._frame.Close()
        self._execute_frame()

    def _on_button_3_ok(self, event):
        self._frame.Close()
        self._calibration_frame()

    def _on_button_4_ok(self, event):
        self._frame.Close()
        self._activate_frame()

    def _on_button_5_yes(self, event):
        self._xinput.set_cal(self._device, self._new_cal)
        self._frame.Close()
        self._save_frame()

    def _on_button_5_no(self, event):
        self._frame.Close()

    def _on_button_6_yes(self, event):
        config = configparser.ConfigParser()
        config['Device'] = {'Name' : self._device}
        config['Matrix'] = {'a0' : self._new_cal[0,0],
                            'a1' : self._new_cal[0,1],
                            'a2' : self._new_cal[0,2],
                            'b0' : self._new_cal[1,0],
                            'b1' : self._new_cal[1,1],
                            'b2' : self._new_cal[1,2],
                            'c0' : self._new_cal[2,0],
                            'c1' : self._new_cal[2,1],
                            'c2' : self._new_cal[2,2]}

        with open(os.path.expanduser('~/.calibration'), 'w') as configfile:
            config.write(configfile)
        self._frame.Close()

    def _on_button_6_no(self, event):
        self._frame.Close()

# Main -----------------------------------------------------------------------
def main():

    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-a", "--activate",
                        action = "store_true",
                        default = False,
                        help = "activate the last saved calibration")
    group.add_argument("-g", "--gui",
                        action = "store_true",
                        default = False,
                        help = "run the calibration in gui mode")
    args = parser.parse_args()

    if args.activate:
        config = configparser.ConfigParser()
        config.read(os.path.expanduser('~/.calibration'))
        device = config['Device']['Name']
        cal = np.matrix([
                [config['Matrix'].getfloat('a0'),
                 config['Matrix'].getfloat('a1'),
                 config['Matrix'].getfloat('a2')],
                [config['Matrix'].getfloat('b0'),
                 config['Matrix'].getfloat('b1'),
                 config['Matrix'].getfloat('b2')],
                [config['Matrix'].getfloat('c0'),
                 config['Matrix'].getfloat('c1'),
                 config['Matrix'].getfloat('c2')]])
        XInput().set_cal(device, cal)
        print("New Calibration:")
        print(cal)
    elif args.gui:
        import wx
        global wx
        GUI().run()
    else:
        CLI().run()


# Entry point-----------------------------------------------------------------
if __name__ == '__main__':
    main()
